import asyncio
import random
import json
import requests
import os
import google.generativeai as genai

# Load config
data = json.load(open("config.json", encoding="utf-8"))
ACCESS_TOKEN = data["ACCESS_TOKEN"]
PAGE_ID = data["PAGE_ID"]
API_KEY = data["API_KEY"]
MODE = data["MODE"]

# Read video titles and paths from videos.txt
with open("videos.txt", "r", encoding="utf-8") as f:
    videos = [line.strip().split("|", 1) for line in f.readlines() if line.strip()]

# Configure Gemini
print("Initializing Gemini...")
genai.configure(api_key=API_KEY)
generation_config = {
    'temperature': 1,
    'top_p': 0.95,
    'top_k': 64,
    'max_output_tokens': 2048,
}
safety_settings = [
    {'category': 'HARM_CATEGORY_HARASSMENT', 'threshold': 'block_none'},
    {'category': 'HARM_CATEGORY_HATE_SPEECH', 'threshold': 'block_none'},
    {'category': 'HARM_CATEGORY_SEXUALLY_EXPLICIT', 'threshold': 'block_none'},
    {'category': 'HARM_CATEGORY_DANGEROUS_CONTENT', 'threshold': 'block_none'},
]

model = genai.GenerativeModel(
    model_name='gemini-2.0-flash',
    generation_config=generation_config,
    safety_settings=safety_settings
)

class ReelUploader:
    def __init__(self, access_token: str, page_id: str):
        self.access_token = access_token
        self.page_id = page_id
        self.video_id = None
        self.upload_url = None

    def initialize_upload(self):
        print("Initializing upload session...")
        url = f"https://graph.facebook.com/v21.0/{self.page_id}/video_reels"
        data = {
            "upload_phase": "start",
            "access_token": self.access_token
        }
        headers = {"Content-Type": "application/json"}
        response = requests.post(url, headers=headers, json=data)
        if response.ok:
            resp_data = response.json()
            self.video_id = resp_data.get("video_id")
            self.upload_url = resp_data.get("upload_url")
            print("Upload session initialized.")
        else:
            raise Exception(f"Failed to initialize upload: {response.text}")

    def upload_video(self, video_file: str):
        if not self.upload_url or not self.video_id:
            raise Exception("Upload session not initialized.")
        if not os.path.exists(video_file):
            raise FileNotFoundError(f"File {video_file} does not exist.")

        with open(video_file, 'rb') as file:
            data = file.read()
        file_size = os.path.getsize(video_file)

        headers = {
            "Authorization": f"OAuth {self.access_token}",
            "offset": "0",
            "file_size": str(file_size),
        }

        response = requests.post(self.upload_url, headers=headers, data=data)
        if response.ok:
            print("Video uploaded successfully.")
        else:
            raise Exception(f"Failed to upload video: {response.text}")

    def publish_reel(self, title="My Reel", description="Generated by AI"):
        print("Publishing reel...")
        url = f"https://graph.facebook.com/v21.0/{self.page_id}/video_reels"
        params = {
            "access_token": self.access_token,
            "video_id": self.video_id,
            "upload_phase": "finish",
            "video_state": "PUBLISHED",
            "description": description,
            "title": title
        }
        response = requests.post(url, params=params)
        if response.ok:
            print("Reel published successfully.")
        else:
            raise Exception(f"Failed to publish reel: {response.text}")

async def text_api(msg: str) -> str:
    convo = model.start_chat(history=[])
    if not msg:
        return 'Empty message'
    await convo.send_message_async(msg)
    return convo.last.text

async def text_auto_post():
    for title, video_path in videos:
        reply_text = await text_api(title)
        print("\nGenerated description:", reply_text)

        uploader = ReelUploader(ACCESS_TOKEN, PAGE_ID)
        uploader.initialize_upload()
        uploader.upload_video(video_path)
        uploader.publish_reel(title=title, description=reply_text)
        await asyncio.sleep(60 + random.randint(10, 60))

if MODE == "text":
    asyncio.run(text_auto_post())
