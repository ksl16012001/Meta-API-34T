import os
import json
import asyncio
from pymongo import MongoClient
import requests
from instagrapi import Client
from instagrapi.types import Location  # n·∫øu b·∫°n mu·ªën th√™m location
def get_otp_token_from_code(code: str) -> str:
    """
    L·∫•y OTP token t·ª´ m√£ 2FA (c√≥ th·ªÉ ch·ª©a kho·∫£ng tr·∫Øng) th√¥ng qua 2fa.live API.

    Args:
        code (str): M√£ 2FA g·ªìm 32 k√Ω t·ª± (c√≥ th·ªÉ c√≥ kho·∫£ng tr·∫Øng)

    Returns:
        str: M√£ OTP n·∫øu th√†nh c√¥ng, None n·∫øu l·ªói
    """
    clean_code = code.replace(" ", "")
    url = f"https://2fa.live/tok/{clean_code}"

    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()
        return data.get("token")
    except Exception as e:
        print(f"‚ùå L·ªói khi l·∫•y token cho m√£ {code}: {e}")
        return None
# Load config
with open("Instagram/config.json", encoding="utf-8") as f:
    config = json.load(f)

SUB_NAME = config["IDPOST"]
DB = config["DB"]
mongo_client = MongoClient(DB)
db = mongo_client.myVirtualDatabase
reddit_collection = db.reddit_posts

# Kh·ªüi t·∫°o v√† ƒëƒÉng nh·∫≠p v√†o Instagram
cl = Client()
cl.load_settings("Instagram/session.json")

# === Posting flow ===
async def post_from_db_instagram(delay_seconds: int):
    posts = reddit_collection.find({"subreddit": SUB_NAME, "status": 0})

    for post in posts:
        title = post.get("Title", "").strip()
        content = post.get("content", "").strip()
        image_path = post.get("img", "").strip()

        if title.lower() == content.lower():
            content = ""

        caption = f"{title}\n\n{content}" if content else title

        try:
            if image_path and os.path.exists(image_path):
                media = cl.photo_upload(
                    path=image_path,
                    caption=caption,
                    extra_data = {
                        "share_to_threads": True,
                        "share_to_threads_destination_id": "17841465657779645",
                    }
                )
                print("‚úÖ ƒêƒÉng b√†i Instagram th√†nh c√¥ng!")
                print("üß™ ƒê√£ th·ª≠ chia s·∫ª l√™n Threads (n·∫øu Instagram h·ªó tr·ª£).")

            else:
                print("‚ùå B·ªè qua b√†i kh√¥ng c√≥ ·∫£nh ho·∫∑c ·∫£nh kh√¥ng t·ªìn t·∫°i.")

            reddit_collection.update_one({"_id": post["_id"]}, {"$set": {"status": 1}})

            for remaining in range(delay_seconds, 0, -1):
                print(f"‚è≥ Ch·ªù {remaining} gi√¢y tr∆∞·ªõc b√†i ti·∫øp theo...", end="\r")
                await asyncio.sleep(1)

        except Exception as e:
            print(f"[‚ùå] L·ªói khi ƒëƒÉng Instagram: {e}")
            continue

asyncio.run(post_from_db_instagram(300))
